{"version":3,"sources":["../../../src/api/controllers/invoice.controller.js"],"names":["findAll","req","res","next","Invoice","find","then","json","invoices","create","body","item","qty","date","due","rate","tax","schema","Joi","object","keys","string","required","number","optional","validate","error","value","details","status","invoice","catch","err"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBAEe;AACXA,WADW,mBACHC,GADG,EACEC,GADF,EACOC,IADP,EACa;AACpBC,0BAAQC,IAAR,GAAeC,IAAf,CAAoB;AAAA,mBAAYJ,IAAIK,IAAJ,CAASC,QAAT,CAAZ;AAAA,SAApB;AACH,KAHU;AAIXC,UAJW,kBAIJR,GAJI,EAICC,GAJD,EAIMC,IAJN,EAIW;AAClB;AACA;AACA;AACA;;AAJkB,wBAMsBF,IAAIS,IAN1B;AAAA,YAMbC,IANa,aAMbA,IANa;AAAA,YAMPC,GANO,aAMPA,GANO;AAAA,YAMFC,IANE,aAMFA,IANE;AAAA,YAMIC,GANJ,aAMIA,GANJ;AAAA,YAMSC,IANT,aAMSA,IANT;AAAA,YAMeC,GANf,aAMeA,GANf;;AAOlB,YAAMC,SAASC,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC7BT,kBAAMO,cAAIG,MAAJ,GAAaC,QAAb,EADuB;AAE7BT,kBAAMK,cAAIL,IAAJ,GAAWS,QAAX,EAFuB;AAG7BR,iBAAKI,cAAIL,IAAJ,GAAWS,QAAX,EAHwB;AAI7BV,iBAAKM,cAAIK,MAAJ,GAAaD,QAAb,EAJwB;AAK7BN,iBAAKE,cAAIK,MAAJ,GAAaC,QAAb,EALwB;AAM7BT,kBAAMG,cAAIK,MAAJ,GAAaC,QAAb;AANuB,SAAlB,CAAf;;AAPkB,4BAgBON,cAAIO,QAAJ,CAAaxB,IAAIS,IAAjB,EAAuBO,MAAvB,CAhBP;AAAA,YAgBVS,KAhBU,iBAgBVA,KAhBU;AAAA,YAgBHC,KAhBG,iBAgBHA,KAhBG;AAiBlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,YAAGD,SAASA,MAAME,OAAlB,EAA0B;AACtB,mBAAO1B,IAAI2B,MAAJ,CAAW,GAAX,EAAgBtB,IAAhB,CAAqBmB,KAArB,CAAP;AACH;AACDtB,0BAAQK,MAAR,CAAekB,KAAf,EACKrB,IADL,CACU;AAAA,mBAAWJ,IAAIK,IAAJ,CAASuB,OAAT,CAAX;AAAA,SADV,EAEKC,KAFL,CAEW;AAAA,mBAAO7B,IAAI2B,MAAJ,CAAW,GAAX,EAAgBtB,IAAhB,CAAqByB,GAArB,CAAP;AAAA,SAFX;AAGH;AAvCU,C","file":"invoice.controller.js","sourcesContent":["import Invoice from '../models/invoice.model'\nimport Joi from 'joi';\n\nexport default {\n    findAll(req, res, next) {\n        Invoice.find().then(invoices => res.json(invoices));\n    },\n    create(req, res, next){\n        // const error = new Error('Error while creating invoices');\n        // error.status = 401;\n        // error.message = 'Custom error';\n        // next(error);\n\n        let {item, qty, date, due, rate, tax} = req.body;\n        const schema = Joi.object().keys({\n            item: Joi.string().required(),\n            date: Joi.date().required(),\n            due: Joi.date().required(),\n            qty: Joi.number().required(),\n            tax: Joi.number().optional(),\n            rate: Joi.number().optional(),\n        });\n        \n        const { error, value } = Joi.validate(req.body, schema);\n        // if(!item){\n        //     return res.status(400).json({err: 'item is required'});\n        // }\n        // if(!date){\n        //     return res.status(400).json({err: 'date is required'});\n        // }\n        // if(!due){\n        //     return res.status(400).json({err: 'due is required'});\n        // }\n        // if(!qty){\n        //     return res.status(400).json({err: 'qty is required'});\n        // }\n        if(error && error.details){\n            return res.status(400).json(error);\n        }\n        Invoice.create(value)\n            .then(invoice => res.json(invoice))\n            .catch(err => res.status(500).json(err));\n    },\n};"]}